# Desc: Player config file for localization and navigation
# Date: 2009-11-16
# CVS: $Id: amcl-sonar.cfg,v 1.2 2005-08-05 23:18:41 gerkey Exp $
# Copied and modified by:
# 2011-06-07 Sebastian Rockel

# Load the map for localization and planning from the same image file,
# and specify the correct resolution (a 500x500 pixel map at 16m x 16m
# is 0.032 m / pixel resolution).
driver
(
  name "vfh"
  provides ["position2d:1"]
  requires ["6667:position2d:0" "6667:laser:0"]
  #requires ["6667:position2d:0" "6667:sonar:0"]
  safety_dist_0ms 0.1 #The minimum distance the robot is allowed to get to obstacles when stopped.
  safety_dist_1ms 0.4 #The minimum distance the robot is allowed to get to obstacles when travelling at 1 m/s.
  #free_space_cutoff_0ms 2000000.0 #Unitless value. The higher the value, the closer the robot will get to obstacles before avoiding (while stopped).
  free_space_cutoff_1ms 1000000.0 #Unitless value. The higher the value, the closer the robot will get to obstacles before avoiding (while travelling at 1 m/s).
  max_speed 0.4 # The maximum allowable speed of the robot.
  max_speed_narrow_opening 0.1 #The maximum allowable speed of the robot through a narrow opening
  #max_turnrate_0ms 40 #The maximum allowable turnrate of the robot when stopped.
  #max_turnrate_1ms 40 #The maximum allowable turnrate of the robot when travelling 1 m/s.
  distance_epsilon 0.2 #Planar distance from the target position that will be considered acceptable. Set this to be GREATER than the corresponding threshold of the underlying position device!
  angle_epsilon 3 #Angular difference from target angle that will considered acceptable. Set this to be GREATER than the corresponding threshold of the underlying position device!
  #min_turn_radius_safety_factor 1.0 #??
  escape_speed 0.1 #If non-zero, the translational velocity that will be used while trying to escape.
  escape_time 5.0 #If non-zero, the time (in seconds) for which an escape attempt will be made.
  escape_max_turnrate 10 #If non-zero, the maximum angular velocity that will be used when trying to escape.
  #synchronous 0 #If zero (the default), VFH runs in its own thread. If non-zero, VFH runs in the main Player thread
  #weight_desired_dir 5.0 #Bias for the robot to turn to move toward goal position.
  #weight_current_dir 3.0 #Bias for the robot to continue moving in current direction of travel.
)
# An alternative local path planner
# Smoothed Nearness diagram
#driver
#(
 #name "snd"
 #provides ["position2d:5"]
 #requires ["input::6665:position2d:0" "output::6665:position2d:0" "6665:laser:0"]
 #robot_radius 0.30 # The radius of the minimum circle which contains the robot
 ##min_gap_width 0.6 # Minimum passage width the driver will try to exploit
 ##obstacle_avoid_dist 1.2 # Maximum distance allowed from an obstacle
 #max_speed 0.4 # Maximum speed allowed
 ##max_turn_rate 1.0 # Maximum angular speed allowed
 #goal_position_tol 0.3 # Maximum distance allowed from the final goal for the algorithm to stop.
 #goal_angle_tol 30 # Maximum angular error from the final goal position for the algorithm to stop
#)
# Nearness diagram
#driver
#(
  #name "nd"
  #provides ["position2d:4"]
  #requires ["output::6667:position2d:0" "input::6667:position2d:0" "6667:laser:0" "6667:sonar:0"]

  #max_speed [0.4 45.0]
  ##min_speed [0.1 10.0]
  #goal_tol [0.3 5.0]
  #wait_on_stall 1

  #rotate_stuck_time 5.0
  #translate_stuck_time 5.0
  #translate_stuck_dist 0.15
  #translate_stuck_angle 10.0

  #avoid_dist 0.4
  #safety_dist 0.2

  #laser_buffer 1
  #sonar_buffer 1
#)

driver
(
 name "amcl"
 provides ["localize:0" "position2d:2"]
 requires ["odometry::6667:position2d:0" "6667:laser:0" "laser::6665:map:0"]
 #enable_gui 1 # Set this to 1 to enable the built-in driver GUI

 # Particle filter settings
 #
 odom_init 0 #Use the odometry device as the "action" sensor
 #pf_min_samples 100 #Lower bound on the number of samples to maintain in the particle filter
 #pf_max_samples 10000 #Upper bound on the number of samples to maintain in the particle filter
 #pf_err 0.01 #Control parameter for the particle set size. See notes below
 #pf_z 3.0 #Control parameter for the particle set size. See notes below
 init_pose [-21.0 3.0 0] #Initial pose estimate (mean value) for the robot
 #init_pose [-6.0 -5.0 0.0] #Initial pose estimate (mean value) for the robot
 init_pose_var [3.0 3.0 360.0] #Uncertainty in the initial pose estimate
 #update_thresh [0.2 0.52] #Minimum change required in action sensor to force update in particle filter

 # Set the 3 rows of the covariance matrix used for odometric drift
 #odom_drift[0] [0.2 0.0 0.0]
 #odom_drift[1] [0.0 0.2 0.0]
 #odom_drift[2] [0.2 0.0 0.2]

 # Laser settings
 #
 laser_pose [0.13 0 0] #Pose of the laser sensor in the robot's coordinate system
 laser_max_beams 50 #Maximum number of range readings being used
 laser_range_max 5.6 #Maximum range returned by laser
 #laser_range_var 0.1 #Variance in range data returned by laser
 laser_range_bad 0.02 #Probable laser min values
)

driver
(
  name "wavefront"
  provides ["planner:0"]
  requires ["output:::position2d:1" "input:::position2d:2" "6665:map:0"]
  alwayson 1
  safety_dist 0.3 #Don't plan a path any closer than this distance to any obstacle. Set this to be GREATER than the corresponding threshold of the underlying position device!
  distance_epsilon 0.4 #Planar distance from the target position that will be considered acceptable. Set this to be GREATER than the corresponding threshold of the underlying position device!
  angle_epsilon 10 #Angular difference from target angle that will considered acceptable. Set this to be GREATER than the corresponding threshold of the underlying position device!
  #cspace_file "planner.cspace" # Currently disabled in Wavefront driver
  #replan_dist_thresh 2.0 #Change in robot's position (in localization space) that will trigger replanning
  #replan_min_time 2.0 #Minimum time in seconds between replanning. Set to -1 for no replanning. See also replan_dist_thresh
  #force_map_refresh 0 # If non-zero, map is updated from subscribed map device whenever new goal is set
)

